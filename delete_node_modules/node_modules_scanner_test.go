package main

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"
)

func TestScanAndDelete(t *testing.T) {
	t.Helper() // Marks the function as a test helper, which helps with error reporting.

	// Create temporary directory for our tests
	tempDir, err := os.MkdirTemp("", "node_modules_scanner_test")
	if err != nil {
		t.Fatalf("Failed to create temporary directory: %v", err)
	}

	defer os.RemoveAll(tempDir) // Ensure cleanup after test

	fmt.Println("Created temporary directory:", tempDir)

	// Create subdirectories
	err = os.MkdirAll(filepath.Join(tempDir, "subdir1", "node_modules"), os.ModePerm)
	if err != nil {
		t.Fatalf("Failed to create subdirectory: %v", err)
	}

	err = os.MkdirAll(filepath.Join(tempDir, "subdir2", "normal_directory"), os.ModePerm)
	if err != nil {
		t.Fatalf("Failed to create subdirectory: %v", err)
	}

	err = os.MkdirAll(filepath.Join(tempDir, "subdir3", "node_modules"), os.ModePerm)
	if err != nil {
		t.Fatalf("Failed to create subdirectory: %v", err)
	}

	// Delete node_modules
	err = scanAndDelete(tempDir)
	if err != nil {
		t.Errorf("Unexpected error during scanAndDelete: %v", err)
	}

	// Verify that only the node_modules directories were deleted
	_, err = os.Stat(filepath.Join(tempDir, "subdir1", "node_modules"))
	if err == nil {
		t.Errorf("node_modules not deleted in subdir1")
	} else if !os.IsNotExist(err) {
		t.Errorf("Unexpected error checking subdir1 node_modules: %v", err)
	}

	_, err = os.Stat(filepath.Join(tempDir, "subdir2", "normal_directory"))
	if err != nil {
		t.Errorf("normal_directory got deleted in subdir2: %v", err)
	}

	_, err = os.Stat(filepath.Join(tempDir, "subdir3", "node_modules"))
	if err == nil {
		t.Errorf("node_modules not deleted in subdir3")
	} else if !os.IsNotExist(err) {
		t.Errorf("Unexpected error checking subdir3 node_modules: %v", err)
	}
}
